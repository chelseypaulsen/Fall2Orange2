library(readxl)
library(zoo)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(seasonal)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tseries)
library(foreign)
library(caschrono)
library(TSA)
library(quantmod)
library(tidyr)

##################################################  HW1  #################################################################

#file.dir <- "C:\\Users\\Allison\\Documents\\Time Series\\"
file.dir <- "C:\\Users\\chels\\Desktop\\MSA\\Fall 2\\Time Series 2\\Well Data\\"

#well data read in and clean
#well<- read_xlsx("C:\\Users\\Allison\\Documents\\Time Series\\G-3549.xlsx",3)
well<- read_xlsx("C:\\Users\\chels\\Desktop\\MSA\\Fall 2\\Time Series 2\\Well Data\\G-3549.xlsx",3)
well_df <- data.frame(well)

well_df_clean <- mutate(well_df, Datetime=date(date))  # adds date to datetime
hour(well_df_clean$Datetime) <- hour(well_df_clean$time) # Adds hour to datetime. Removes minutes from all hours
well_df_clean$Datetime <- as.POSIXct(well_df_clean$Datetime)  # change time type of newly created Datetime
well_df_clean <- well_df_clean %>%    # summarizes to hourly data and  
  group_by(Datetime) %>%              # averages Corrected values when multiple rows have same datetime
  summarise(well_ft=mean(Corrected)) %>%
  filter(Datetime >= ymd_hm('2007-10-01 01:00') &    # filters to dates defined in Simmons instructions
           Datetime <= ymd_hm('2018-06-12 23:00'))

#tide data read in and clean
#tide<-read_xlsx("C:\\Users\\Allison\\Documents\\Time Series\\G-3549.xlsx",2)
tide<-read_xlsx("C:\\Users\\chels\\Desktop\\MSA\\Fall 2\\Time Series 2\\Well Data\\G-3549.xlsx",2)
tide_df <- data.frame(tide)

tide_df_clean <- mutate(tide_df, Datetime=date(Date))  # adds date to datetime
hour(tide_df_clean$Datetime) <- hour(tide_df_clean$Time) # Adds hour to datetime. Removes minutes from all hours
tide_df_clean$Datetime <- as.POSIXct(tide_df_clean$Datetime)  # change time type of newly created Datetime
tide_df_clean <- tide_df_clean %>%    # summarizes to hourly data and 
  group_by(Datetime) %>%              # averages Corrected values when multiple rows have same datetime
  summarise(Tide_ft=mean(Tide_ft)) %>%
  filter(Datetime >= ymd_hm('2007-10-01 01:00') &    # filters to dates defined in Simmons instructions
           Datetime <= ymd_hm('2018-06-12 23:00'))

#rain data read in and clean
#rain<-read_xlsx("C:\\Users\\Allison\\Documents\\Time Series\\G-3549.xlsx",1)
rain<-read_xlsx("C:\\Users\\chels\\Desktop\\MSA\\Fall 2\\Time Series 2\\Well Data\\G-3549.xlsx",1)
rain$date<- as.Date(rain$Date)
rain$time<- format(as.POSIXct(rain$Date, "%H:%M:%S"))
rain_df <-data.frame(rain)

rain_df_clean <- mutate(rain_df, Datetime=date(date))  # adds date to datetime
hour(rain_df_clean$Datetime) <- hour(rain_df_clean$time) # Adds hour to datetime. Removes minutes from all hours
rain_df_clean$Datetime <- as.POSIXct(rain_df_clean$Datetime)  # change time type of newly created Datetime
rain_df_clean <- rain_df_clean %>%    # summarizes to hourly data and  
  group_by(Datetime) %>%              # averages Corrected values when multiple rows have same datetime
  summarise(RAIN_FT=mean(RAIN_FT)) %>%
  filter(Datetime >= ymd_hm('2007-10-01 01:00') &    # filters to dates defined in Simmons instructions
           Datetime <= ymd_hm('2018-06-12 23:00'))


# create df of hourly dates in daterange, then join well data
# df has all hours, but some hours will have NA for well_ft
datetimes <- as.data.frame(seq(ymd_hm('2007-10-01 01:00'), ymd_hm('2018-06-12 23:00'), by='1 hour'))
names(datetimes) <- c('Datetime')
df1 <- datetimes %>%
  left_join(well_df_clean, by='Datetime')

df2 <- datetimes %>%
  left_join(tide_df_clean, by='Datetime')

df3<-datetimes %>%
  left_join(rain_df_clean, by='Datetime') 

#sum(is.na(rain_df_clean))

# change to zoo object
well_ft <- read.zoo(df1)
#tide_ft <- read.zoo(df2)
#rain_ft <- read.zoo(df3)


# Impute missing values (fill in well_ft NAs)
well_ft_impute <- na.approx(well_ft)
#tide_ft_impute <- na.approx(tide_ft)
#rain_ft_impute <- na.approx(rain_ft)

#Split into training and test
train_well = well_ft_impute[67325:93623,] #just using last 3 years to speed processing
test_well = well_ft_impute[93624:93791,]

#train_tide = tide_df_clean tide_ft_impute[67325:93623,]
#test_tide = tide_ft_impute[93624:93791,]

train_tide = df2$Tide_ft[67325:93623]
test_tide = df2$Tide_ft[93624:93791]

#train_rain = rain_ft_impute[67325:93623,]
#test_rain = rain_ft_impute[93624:93791,]

train_rain = df3$RAIN_FT[67325:93623]
test_rain = df3$RAIN_FT[93624:93791]

plot(train_rain)
plot(train_tide)
plot(train_well)

arima_well = Arima(train_well, order=c(5,0,5))
summary(arima_well)
ndiffs(arima_well$residuals)
#0

###########################################################################################
auto.arima(arima_well$residuals,seasonal=T)
#arima(2,0,2)

###########################################################################################

#running model with all vars--STILL LOOKING FOR BEST MODEL
x.reg=cbind(train_rain)
model2=Arima(train_well,order=c(2,0,0),xreg=x.reg)
summary(model2)
res.model2=model2$residuals
plot(res.model2)
ndiffs(res.model2)

model3=Arima(train_well,order=c(5,0,5),seasonal=c(2,0,0),xreg=x.reg)
summary(model3)
model4=Arima(train_well,order=c(5,0,5),xreg=x.reg)
summary(model4)
#acf and pacf plots
acf(model3$residuals)
pacf(model3$residuals)


###########################################


yearly = 24*365.25
monthly = 24*(365.25/12)
biannual = 24*(365.25/2)

seasons <- msts(train_well, start=1, seasonal.periods = c(yearly))

#fitting sine/cosine with fourier
x.reg=cbind(train_rain, train_tide)
model5<-Arima(seasons,order=c(2,0,2), xreg=cbind(fourier(seasons,K=1),x.reg))
summary(model5)
#acf and pacf plots
acf(model5$residuals)
pacf(model5$residuals)

ndiffs(model5$residuals)
#0

checkresiduals(model5)

#White noise plots
White.LB <- rep(NA, 48)
for(i in 24:48){
  White.LB[i] <- Box.test(model5$residuals, lag = i, type = "Ljung", fitdf = 24)$p.value
}
#fitdf has to be the sum of ar and ma terms

White.LB <- pmin(White.LB, 0.2)
barplot(White.LB, main = "Ljung-Box Test P-values", ylab = "Probabilities", xlab = "Lags", ylim = c(0, 0.2))
abline(h = 0.01, lty = "dashed", col = "black")
abline(h = 0.05, lty = "dashed", col = "black")




#plotting forecasted and test values for last week


# change to zoo object
tide_ft <- read.zoo(df2)
rain_ft <- read.zoo(df3)

# Impute missing values (fill in well_ft NAs)
tide_ft_impute <- na.approx(tide_ft)
rain_ft_impute <- na.approx(rain_ft)

#making models for the x vars
model.tide=auto.arima(tide_ft_impute)
#summary(model.tide)#(5,1,1)
#model.tide=Arima(tide_ft_impute,order=c(5,0,1))
tide.future=forecast(model.tide,h=168)
model.rain=auto.arima(rain_ft_impute)
#summary(model.rain)#(3,0,2)
rain.future=forecast(model.rain,h=168)

t.f=tide.future$mean
r.f=rain.future$mean

seasons2 <- msts(test_well, start=1, seasonal.periods = c(yearly))
newx=cbind(t.f,r.f)
final.pred=forecast(model5,xreg=cbind(fourier(seasons2,K=1),newx),h=168) ##This is what is not working



plot(as.numeric(test_well), main="Forecasted and Actual Water Elevation Values Over Time", xlab="Time",
     ylab="Water Elevation (ft)",col="red", ylim=c(.1,2))

lines(as.numeric(final.pred$mean)) #ts objects on same scale
lines(as.numeric(final.pred$upper[,2], col="blue"))
lines(as.numeric(final.pred$lower[,2], col="blue"))
