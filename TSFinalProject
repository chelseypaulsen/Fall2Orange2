library(readxl)
library(zoo)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(seasonal)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tseries)
library(foreign)
library(caschrono)
library(TSA)
library(quantmod)

##################################################  HW1  #################################################################

file.dir <- "C:\\Users\\Allison\\Documents\\Time Series\\"

#well data read in and clean
well<- read_xlsx("C:\\Users\\Allison\\Documents\\Time Series\\G-3549.xlsx",3)
well_df <- data.frame(well)

well_df_clean <- mutate(well_df, Datetime=date(date))  # adds date to datetime
hour(well_df_clean$Datetime) <- hour(well_df_clean$time) # Adds hour to datetime. Removes minutes from all hours
well_df_clean$Datetime <- as.POSIXct(well_df_clean$Datetime)  # change time type of newly created Datetime
well_df_clean <- well_df_clean %>%    # summarizes to hourly data and  
  group_by(Datetime) %>%              # averages Corrected values when multiple rows have same datetime
  summarise(well_ft=mean(Corrected)) %>%
  filter(Datetime >= ymd_hm('2007-10-01 01:00') &    # filters to dates defined in Simmons instructions
           Datetime <= ymd_hm('2018-06-12 23:00'))

#tide data read in and clean
tide<-read_xlsx("C:\\Users\\Allison\\Documents\\Time Series\\G-3549.xlsx",2)
tide_df <- data.frame(tide)

tide_df_clean <- mutate(tide_df, Datetime=date(Date))  # adds date to datetime
hour(tide_df_clean$Datetime) <- hour(tide_df_clean$Time) # Adds hour to datetime. Removes minutes from all hours
tide_df_clean$Datetime <- as.POSIXct(tide_df_clean$Datetime)  # change time type of newly created Datetime
tide_df_clean <- tide_df_clean %>%    # summarizes to hourly data and  
  group_by(Datetime) %>%              # averages Corrected values when multiple rows have same datetime
  summarise(Tide_ft=mean(Tide_ft)) %>%
  filter(Datetime >= ymd_hm('2007-10-01 01:00') &    # filters to dates defined in Simmons instructions
           Datetime <= ymd_hm('2018-06-12 23:00'))


# create df of hourly dates in daterange, then join well data
# df has all hours, but some hours will have NA for well_ft
datetimes <- as.data.frame(seq(ymd_hm('2007-10-01 01:00'), ymd_hm('2018-06-12 23:00'), by='1 hour'))
names(datetimes) <- c('Datetime')
df1 <- datetimes %>%
  left_join(well_df_clean, by='Datetime')

df2 <- datetimes %>%
  left_join(tide_df_clean, by='Datetime')


# change to zoo object
well_ft <- read.zoo(df1)
tide_ft <- read.zoo(df2)

# Impute missing values (fill in well_ft NAs)
well_ft_impute <- na.approx(well_ft)
tide_ft_impute <- na.approx(tide_ft)

#Split into training and test
train_well = well_ft_impute[1:93623,] #last 3 years
test_well = well_ft_impute[93624:93791,]

arima1 = Arima(train_well, order=c(5,0,5))
summary(arima1)

arima2 = Arima(test_well, order=c(5,0,5))
summary(arima2)

#acf and pacf plots
acf(arima1$residuals)
pacf(arima1$residuals)

#White noise plots
White.LB <- rep(NA, 20)
for(i in 1:20){
  White.LB[i] <- Box.test(arima1$residuals, lag = i, type = "Ljung", fitdf = 5)$p.value
}
#fitdf has to equal the highest ar or ma term

White.LB <- pmin(White.LB, 0.2)
barplot(White.LB, main = "Ljung-Box Test P-values", ylab = "Probabilities", xlab = "Lags", ylim = c(0, 0.2))
abline(h = 0.01, lty = "dashed", col = "black")
abline(h = 0.05, lty = "dashed", col = "black")


#plotting forecasted and test values for last week
f1=forecast(arima1, h=168)

plot(test_well, main="Forecasted and Actual Water Elevation Values Over Time", xlab="Time",
     ylab="Water Elevation (ft)",col="red", ylim=c(.1,.6))
lines(f1$mean)
lines(f1$upper[,2], col="blue")
lines(f1$lower[,2], col="blue")


#TS Project

