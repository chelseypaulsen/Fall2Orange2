
library(readxl)
library(zoo)
library(forecast)
library(haven)
library(fma)
library(expsmooth)
library(lmtest)
library(seasonal)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tseries)
library(foreign)

##################################################  HW1  #################################################################

well<- read_xlsx("C:\\Users\\chels\\Desktop\\MSA\\Fall 2\\Time Series 2\\Well Data\\G-3549.xlsx",3)
well_df <- data.frame(well)

well_df_clean <- mutate(well_df, Datetime=date(date))  # adds date to datetime
hour(well_df_clean$Datetime) <- hour(well_df_clean$time) # Adds hour to datetime. Removes minutes from all hours
well_df_clean$Datetime <- as.POSIXct(well_df_clean$Datetime)  # change time type of newly created Datetime
well_df_clean <- well_df_clean %>%    # summarizes to hourly data and  
  group_by(Datetime) %>%              # averages Corrected values when multiple rows have same datetime
  summarise(well_ft=mean(Corrected)) %>%
  filter(Datetime >= ymd_hm('2007-10-01 01:00') &    # filters to dates defined in Simmons instructions
           Datetime <= ymd_hm('2018-06-12 23:00'))

dim(well_df_clean)
#92934

# create df of hourly dates in daterange, then join well data
# df has all hours, but some hours will have NA for well_ft
datetimes <- as.data.frame(seq(ymd_hm('2007-10-01 01:00'), ymd_hm('2018-06-12 23:00'), by='1 hour'))
names(datetimes) <- c('Datetime')
df <- datetimes %>%
  left_join(well_df_clean, by='Datetime')

dim(datetimes)
#93791 --- so #857

# change to zoo object
well_ft <- read.zoo(df)

# Impute missing values (fill in well_ft NAs)
well_ft_impute <- na.approx(well_ft)


#making time series plots
plot(well_ft_impute,xlab = "Time (Years)", ylab = "Corrected Well Height (feet)", main="Time Series Plot of Well 3549 Height")

#time series decomposition 
decomp <- ts(well_ft_impute, freq=8760)
new <- stl(decomp, s.window = 7)
plot(new)


#ADF test- deterministic/stochastic seasons? 
adf.test(decomp, alternative = "stationary", k = 0) #p=0.01, so reject null, so deterministic seasonal

#export to do arima analysis in sas
write.foreign(well_ft_impute, "C:\\Users\\Allison\\Documents\\Time Series\\well_clean.txt", 
              "C:\\Users\\Allison\\Documents\\Time Series\\well_clean.sas", package = "SAS")

#fitting sine/cosine with fourier
arima.2<-Arima(decomp,order=c(0,0,0),xreg=fourier(decomp,K=24))
summary(arima.2)
